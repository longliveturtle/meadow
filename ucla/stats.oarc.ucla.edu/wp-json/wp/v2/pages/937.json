{"id":937,"date":"2016-02-11T18:29:03","date_gmt":"2016-02-11T18:29:03","guid":{"rendered":"http:\/\/dev2.hpc.ucla.edu\/r\/dae-3\/r-online-manual-2\/"},"modified":"2022-09-23T16:02:24","modified_gmt":"2022-09-23T23:02:24","slug":"zip","status":"publish","type":"page","link":"https:\/\/stats.oarc.ucla.edu\/r\/dae\/zip\/","title":{"rendered":"Zero-Inflated Poisson Regression |  R Data Analysis Examples"},"content":{"rendered":"<p>Zero-inflated Poisson regression is used to model count data that has an excess of zero counts.\nFurther, theory suggests that the excess zeros\nare generated by a separate process from the count values and that the excess zeros can\nbe modeled independently. Thus, the <strong>zip<\/strong> model has two parts, a\nPoisson count model and the logit model\nfor predicting excess zeros. You may want to review these Data Analysis Example pages,\n<a href=\"\/r\/dae\/poisson-regression\/\">Poisson Regression<\/a> and <a href=\"\/r\/dae\/logit-regression\/\">Logit Regression<\/a>.<\/p>\n<p>This page uses the following packages. Make sure that you can load\nthem before trying to run the examples on this page. If you do not have\na package installed, run: <code>install.packages(\"packagename\")<\/code>, or\nif you see the version is out of date, run: <code>update.packages()<\/code>.<\/p>\n<div id=\"unnamed-chunk-2\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl kwd\">require<\/span><span class=\"hl std\">(ggplot2)<\/span>\r\n<span class=\"hl kwd\">require<\/span><span class=\"hl std\">(pscl)<\/span>\r\n<span class=\"hl kwd\">require<\/span><span class=\"hl std\">(boot)<\/span>\r\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n<p><code class=\"knitr inline\"><strong>Version info: <\/strong>Code for this page was tested in R version 3.4.1<\/code><\/p>\n<p><strong>Please Note:<\/strong> The purpose of this page is to show how to use various data analysis commands.\nIt does not cover all aspects of the research process which researchers are expected to do. In\nparticular, it does not cover data cleaning and verification, verification of assumptions, model\ndiagnostics and potential follow-up analyses.<\/p>\n<h2>Examples of Zero-Inflated Poisson regression<\/h2>\n<p><strong>Example 1<\/strong>. School administrators study the attendance behavior of high school\njuniors at two schools. Predictors of the number of days of absence include\ngender of the student and standardized test scores in math and language arts.<\/p>\n<p><strong>Example 2<\/strong>. The state wildlife biologists want to model how many fish are\nbeing caught by fishermen at a state park. Visitors are asked how long they\nstayed, how many people were in the group, were there children in the group and\nhow many fish were caught. Some visitors do not fish, but there is no data on\nwhether a person fished or not. Some visitors who did fish did not catch any\nfish so there are excess zeros in the data because of the people that did not\nfish.<\/p>\n<h2>Description of the data<\/h2>\n<p>Let&#8217;s pursue Example 2 from above.<\/p>\n<p>We have data on 250 groups that went to a park. Each group was questioned\nabout how many fish they caught (<code>count<\/code>), how many children were in the\ngroup (<code>child<\/code>), how many people were in the group (<code>persons<\/code>), and\nwhether or not they brought a camper to the park (<code>camper<\/code>).<\/p>\n<p>In addition to predicting the number of fish caught, there is interest in\npredicting the existence of excess zeros, i.e., the probability that a group\ncaught zero fish. We will use the variables <code>child<\/code>, <code>persons<\/code>, and\n<code>camper<\/code> in our model. Let&#8217;s look at the data.<\/p>\n<div id=\"unnamed-chunk-3\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl std\">zinb<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">read.csv<\/span><span class=\"hl std\">(<\/span><span class=\"hl str\">\"https:\/\/stats.idre.ucla.edu\/stat\/data\/fish.csv\"<\/span><span class=\"hl std\">)<\/span>\r\n<span class=\"hl std\">zinb<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">within<\/span><span class=\"hl std\">(zinb, {<\/span>\r\n    <span class=\"hl std\">nofish<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">factor<\/span><span class=\"hl std\">(nofish)<\/span>\r\n    <span class=\"hl std\">livebait<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">factor<\/span><span class=\"hl std\">(livebait)<\/span>\r\n    <span class=\"hl std\">camper<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">factor<\/span><span class=\"hl std\">(camper)<\/span>\r\n<span class=\"hl std\">})<\/span>\r\n\r\n<span class=\"hl kwd\">summary<\/span><span class=\"hl std\">(zinb)<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">##  nofish  livebait camper     persons         child             xb        \r\n##  0:176   0: 34    0:103   Min.   :1.00   Min.   :0.000   Min.   :-3.275  \r\n##  1: 74   1:216    1:147   1st Qu.:2.00   1st Qu.:0.000   1st Qu.: 0.008  \r\n##                           Median :2.00   Median :0.000   Median : 0.955  \r\n##                           Mean   :2.53   Mean   :0.684   Mean   : 0.974  \r\n##                           3rd Qu.:4.00   3rd Qu.:1.000   3rd Qu.: 1.964  \r\n##                           Max.   :4.00   Max.   :3.000   Max.   : 5.353  \r\n##        zg             count      \r\n##  Min.   :-5.626   Min.   :  0.0  \r\n##  1st Qu.:-1.253   1st Qu.:  0.0  \r\n##  Median : 0.605   Median :  0.0  \r\n##  Mean   : 0.252   Mean   :  3.3  \r\n##  3rd Qu.: 1.993   3rd Qu.:  2.0  \r\n##  Max.   : 4.263   Max.   :149.0\r\n<\/pre>\n<\/div>\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl com\">## histogram with x axis in log10 scale<\/span>\r\n<span class=\"hl kwd\">ggplot<\/span><span class=\"hl std\">(zinb,<\/span> <span class=\"hl kwd\">aes<\/span><span class=\"hl std\">(count))<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl kwd\">geom_histogram<\/span><span class=\"hl std\">()<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl kwd\">scale_x_log10<\/span><span class=\"hl std\">()<\/span>\r\n<\/pre>\n<\/div>\n<\/div>\n<div class=\"rimage default\"><img decoding=\"async\" class=\"plot\" src=\"https:\/\/stats.idre.ucla.edu\/wp-content\/uploads\/2016\/02\/zipoisson-unnamed-chunk-3.png\" alt=\"plot of chunk unnamed-chunk-3\" width=\"500px\" height=\"500px\" \/><\/div>\n<\/div>\n<h2>Analysis methods you might consider<\/h2>\n<p>Below is a list of some analysis methods you may have encountered.\nSome of the methods listed are quite reasonable while others have either fallen out of favor or\nhave limitations.<\/p>\n<ul>\n<li>Zero-inflated Poisson Regression &#8211; The focus of this web page.<\/li>\n<li>Zero-inflated Negative Binomial Regression &#8211; Negative binomial regression does better with\nover dispersed data, i.e. variance much larger than the mean.<\/li>\n<li>Ordinary Count Models &#8211; Poisson or negative binomial models might be more\nappropriate if there are no excess zeros.<\/li>\n<li>OLS Regression &#8211; You could try to analyze these data using OLS regression. However, count\ndata are highly non-normal and are not well estimated by OLS regression.<\/li>\n<\/ul>\n<h2>Zero-inflated Poisson regression<\/h2>\n<p>Though we can run a Poisson regression in R using the <code>glm<\/code> function in\none of the core packages, we need another package to run\nthe zero-inflated Poisson model. We use the <code>pscl<\/code> package.<\/p>\n<div id=\"unnamed-chunk-4\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre><span class=\"hl kwd\">summary<\/span><span class=\"hl std\">(m1<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">zeroinfl<\/span><span class=\"hl std\">(count<\/span> <span class=\"hl opt\">~<\/span> <span class=\"hl std\">child<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl std\">camper<\/span> <span class=\"hl opt\">|<\/span> <span class=\"hl std\">persons,<\/span> <span class=\"hl kwc\">data<\/span> <span class=\"hl std\">= zinb))<\/span><\/pre>\n<\/div>\n<pre>## Call:\r\n## zeroinfl(formula = count ~ child + camper | persons, data = zinb)\r\n## \r\n## Pearson residuals:\r\n##     Min      1Q  Median      3Q     Max \r\n## -1.2369 -0.7540 -0.6080 -0.1921 24.0847 \r\n## \r\n## Count model coefficients (poisson with log link):\r\n##             Estimate Std. Error z value Pr(&gt;|z|)    \r\n## (Intercept)  1.59789    0.08554  18.680   &lt;2e-16 ***\r\n## child       -1.04284    0.09999 -10.430   &lt;2e-16 ***\r\n## camper1      0.83402    0.09363   8.908   &lt;2e-16 *** \r\n## \r\n## Zero-inflation model coefficients (binomial with logit link): \r\n##             Estimate Std. Error z value Pr(&gt;|z|)    \r\n## (Intercept)   1.2974     0.3739   3.470 0.000520 ***\r\n## persons      -0.5643     0.1630  -3.463 0.000534 ***\r\n## ---\r\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \r\n## \r\n## Number of iterations in BFGS optimization: 12 \r\n## Log-likelihood: -1032 on 5 Df\r\n<\/pre>\n<\/div>\n<\/div>\n<p>The output looks very much like the output from two OLS regressions in R.\nBelow the model call, you will find a block of output containing Poisson regression coefficients for\neach of the variables along with standard errors, z-scores, and p-values for the coefficients. A second block follows that\ncorresponds to the inflation model. This includes logit\ncoefficients for predicting excess zeros along with their standard errors,\nz-scores, and p-values.<\/p>\n<p>All of the predictors in both the count and inflation portions of the\nmodel are statistically significant. This model fits the data significantly\nbetter than the null model, i.e., the intercept-only model. To show that\nthis is the case, we can compare with the current model to a null model\nwithout predictors using chi-squared test on the difference of log\nlikelihoods.<\/p>\n<div id=\"unnamed-chunk-5\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl std\">mnull<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">update<\/span><span class=\"hl std\">(m1, .<\/span> <span class=\"hl opt\">~<\/span> <span class=\"hl num\">1<\/span><span class=\"hl std\">)<\/span>\r\n\r\n<span class=\"hl kwd\">pchisq<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">2<\/span> <span class=\"hl opt\">*<\/span> <span class=\"hl std\">(<\/span><span class=\"hl kwd\">logLik<\/span><span class=\"hl std\">(m1)<\/span> <span class=\"hl opt\">-<\/span> <span class=\"hl kwd\">logLik<\/span><span class=\"hl std\">(mnull)),<\/span> <span class=\"hl kwc\">df<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl num\">3<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwc\">lower.tail<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl num\">FALSE<\/span><span class=\"hl std\">)<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">## 'log Lik.' 4.041e-41 (df=5)\r\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n<p>Since we have three predictor variables in the full model, the degrees of freedom for the\nchi-squared test is 3. This yields a high significant p-value; thus, our overall model is\nstatistically significant.<\/p>\n<p>We can get confidence intervals for the parameters and the\nexponentiated parameters using bootstrapping. For the Poisson model, these would\nbe incident risk ratios, for the zero inflation model, odds ratios. We use the\n<code>boot<\/code> package. First, we get the coefficients from our original model to\nuse as start values for the model to speed up the time it takes to estimate. Then\nwe write a short function that takes data and indices as input and returns the\nparameters we are interested in. Finally, we pass that\nto the <code>boot<\/code> function and do 1200 replicates, using snow to distribute across\nfour cores. Note that you should adjust the number of cores to whatever your machine\nhas. Also, for final results, one may wish to increase the number of replications to\nhelp ensure stable results.<\/p>\n<div id=\"unnamed-chunk-7\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl kwd\">dput<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">coef<\/span><span class=\"hl std\">(m1,<\/span> <span class=\"hl str\">\"count\"<\/span><span class=\"hl std\">))<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">## structure(c(1.59788828690411, -1.04283909332231, 0.834023618148891\r\n## ), .Names = c(\"(Intercept)\", \"child\", \"camper1\"))\r\n<\/pre>\n<\/div>\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl kwd\">dput<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">coef<\/span><span class=\"hl std\">(m1,<\/span> <span class=\"hl str\">\"zero\"<\/span><span class=\"hl std\">))<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">## structure(c(1.29744027908309, -0.564347365357873), .Names = c(\"(Intercept)\", \r\n## \"persons\"))\r\n<\/pre>\n<\/div>\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl std\">f<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwa\">function<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">data<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwc\">i<\/span><span class=\"hl std\">) {<\/span>\r\n  <span class=\"hl kwd\">require<\/span><span class=\"hl std\">(pscl)<\/span>\r\n  <span class=\"hl std\">m<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">zeroinfl<\/span><span class=\"hl std\">(count<\/span> <span class=\"hl opt\">~<\/span> <span class=\"hl std\">child<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl std\">camper<\/span> <span class=\"hl opt\">|<\/span> <span class=\"hl std\">persons,<\/span> <span class=\"hl kwc\">data<\/span> <span class=\"hl std\">= data[i, ],<\/span>\r\n    <span class=\"hl kwc\">start<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">list<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">count<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">1.598<\/span><span class=\"hl std\">,<\/span> <span class=\"hl opt\">-<\/span><span class=\"hl num\">1.0428<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">0.834<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwc\">zero<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">1.297<\/span><span class=\"hl std\">,<\/span> <span class=\"hl opt\">-<\/span><span class=\"hl num\">0.564<\/span><span class=\"hl std\">)))<\/span>\r\n  <span class=\"hl kwd\">as.vector<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">t<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">do.call<\/span><span class=\"hl std\">(rbind,<\/span> <span class=\"hl kwd\">coef<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">summary<\/span><span class=\"hl std\">(m)))[,<\/span> <span class=\"hl num\">1<\/span><span class=\"hl opt\">:<\/span><span class=\"hl num\">2<\/span><span class=\"hl std\">]))<\/span>\r\n<span class=\"hl std\">}<\/span>\r\n\r\n<span class=\"hl kwd\">set.seed<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">10<\/span><span class=\"hl std\">)<\/span>\r\n<span class=\"hl std\">res<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">boot<\/span><span class=\"hl std\">(zinb, f,<\/span> <span class=\"hl kwc\">R<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl num\">1200<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwc\">parallel<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl str\">\"snow\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwc\">ncpus<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl num\">4<\/span><span class=\"hl std\">)<\/span>\r\n\r\n<span class=\"hl com\">## print results<\/span>\r\n<span class=\"hl std\">res<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">## \r\n## ORDINARY NONPARAMETRIC BOOTSTRAP\r\n## \r\n## \r\n## Call:\r\n## boot(data = zinb, statistic = f, R = 1200, parallel = \"snow\", \r\n##     ncpus = 4)\r\n## \r\n## \r\n## Bootstrap Statistics :\r\n##      original    bias    std. error\r\n## t1*   1.59789 -0.056661     0.30307\r\n## t2*   0.08554  0.004257     0.01670\r\n## t3*  -1.04284 -0.002510     0.40557\r\n## t4*   0.09999  0.004395     0.01539\r\n## t5*   0.83402  0.017178     0.40465\r\n## t6*   0.09363  0.004581     0.01536\r\n## t7*   1.29744  0.020810     0.48058\r\n## t8*   0.37385  0.008224     0.03662\r\n## t9*  -0.56435 -0.030103     0.26673\r\n## t10*  0.16296  0.005272     0.02981\r\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n<p>The results are alternating parameter estimates and standard\nerrors. That is, the first row has the first parameter estimate\nfrom our model. The second has the standard error for the\nfirst parameter. The third column contains the bootstrapped\nstandard errors, which are considerably larger than those estimated\nby <code>zeroinfl<\/code>.<\/p>\n<p>Now we can get the confidence intervals for all the parameters.\nWe start on the original scale with percentile and bias adjusted CIs.\nWe also compare these results with the regular confidence intervals\nbased on the standard errors.<\/p>\n<div id=\"unnamed-chunk-8\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl com\">## basic parameter estimates with percentile and bias adjusted CIs<\/span>\r\n<span class=\"hl std\">parms<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">t<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">sapply<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">1<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">3<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">5<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">7<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">9<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwa\">function<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">i<\/span><span class=\"hl std\">) {<\/span>\r\n  <span class=\"hl std\">out<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">boot.ci<\/span><span class=\"hl std\">(res,<\/span> <span class=\"hl kwc\">index<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(i, i<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl num\">1<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwc\">type<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl str\">\"perc\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl str\">\"bca\"<\/span><span class=\"hl std\">))<\/span>\r\n  <span class=\"hl kwd\">with<\/span><span class=\"hl std\">(out,<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">Est<\/span> <span class=\"hl std\">= t0,<\/span> <span class=\"hl kwc\">pLL<\/span> <span class=\"hl std\">= percent[<\/span><span class=\"hl num\">4<\/span><span class=\"hl std\">],<\/span> <span class=\"hl kwc\">pUL<\/span> <span class=\"hl std\">= percent[<\/span><span class=\"hl num\">5<\/span><span class=\"hl std\">],<\/span>\r\n     <span class=\"hl kwc\">bcaLL<\/span> <span class=\"hl std\">= bca[<\/span><span class=\"hl num\">4<\/span><span class=\"hl std\">],<\/span> <span class=\"hl kwc\">bcaLL<\/span> <span class=\"hl std\">= bca[<\/span><span class=\"hl num\">5<\/span><span class=\"hl std\">]))<\/span>\r\n<span class=\"hl std\">}))<\/span>\r\n\r\n<span class=\"hl com\">## add row names<\/span>\r\n<span class=\"hl kwd\">row.names<\/span><span class=\"hl std\">(parms)<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">names<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">coef<\/span><span class=\"hl std\">(m1))<\/span>\r\n<span class=\"hl com\">## print results<\/span>\r\n<span class=\"hl std\">parms<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">##                       Est     pLL      pUL     bcaLL    bcaLL\r\n## count_(Intercept)  1.5979  0.8793  2.07810  1.087354  2.22614\r\n## count_child       -1.0428 -1.7509 -0.17531 -1.618509 -0.02203\r\n## count_camper1      0.8340  0.0596  1.62653  0.001571  1.59995\r\n## zero_(Intercept)   1.2974  0.3503  2.21984  0.293577  2.12070\r\n## zero_persons      -0.5643 -1.1087 -0.07847 -1.008526  0.00633\r\n<\/pre>\n<\/div>\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl com\">## compare with normal based approximation<\/span>\r\n<span class=\"hl kwd\">confint<\/span><span class=\"hl std\">(m1)<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">##                     2.5 %  97.5 %\r\n## count_(Intercept)  1.4302  1.7655\r\n## count_child       -1.2388 -0.8469\r\n## count_camper1      0.6505  1.0175\r\n## zero_(Intercept)   0.5647  2.0302\r\n## zero_persons      -0.8838 -0.2449\r\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n<p>The bootstrapped confidence intervals are considerably wider than the\nnormal based approximation. The bootstrapped CIs are more consistent with\nthe CIs from Stata when using robust standard errors.<\/p>\n<p>Now we can estimate the incident risk ratio (IRR) for the Poisson model and\nodds ratio (OR) for the logistic (zero inflation) model. This is done using\nalmost identical code as before, but passing a transformation function to the\n<code>h<\/code> argument of <code>boot.ci<\/code>, in this case, <code>exp<\/code> to exponentiate.<\/p>\n<div id=\"unnamed-chunk-9\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl com\">## exponentiated parameter estimates with percentile and bias adjusted CIs<\/span>\r\n<span class=\"hl std\">expparms<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">t<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">sapply<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">1<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">3<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">5<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">7<\/span><span class=\"hl std\">,<\/span> <span class=\"hl num\">9<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwa\">function<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">i<\/span><span class=\"hl std\">) {<\/span>\r\n  <span class=\"hl std\">out<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">boot.ci<\/span><span class=\"hl std\">(res,<\/span> <span class=\"hl kwc\">index<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(i, i<\/span> <span class=\"hl opt\">+<\/span> <span class=\"hl num\">1<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwc\">type<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl str\">\"perc\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl str\">\"bca\"<\/span><span class=\"hl std\">),<\/span> <span class=\"hl kwc\">h<\/span> <span class=\"hl std\">= exp)<\/span>\r\n  <span class=\"hl kwd\">with<\/span><span class=\"hl std\">(out,<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">Est<\/span> <span class=\"hl std\">= t0,<\/span> <span class=\"hl kwc\">pLL<\/span> <span class=\"hl std\">= percent[<\/span><span class=\"hl num\">4<\/span><span class=\"hl std\">],<\/span> <span class=\"hl kwc\">pUL<\/span> <span class=\"hl std\">= percent[<\/span><span class=\"hl num\">5<\/span><span class=\"hl std\">],<\/span>\r\n    <span class=\"hl kwc\">bcaLL<\/span> <span class=\"hl std\">= bca[<\/span><span class=\"hl num\">4<\/span><span class=\"hl std\">],<\/span> <span class=\"hl kwc\">bcaLL<\/span> <span class=\"hl std\">= bca[<\/span><span class=\"hl num\">5<\/span><span class=\"hl std\">]))<\/span>\r\n<span class=\"hl std\">}))<\/span>\r\n\r\n<span class=\"hl com\">## add row names<\/span>\r\n<span class=\"hl kwd\">row.names<\/span><span class=\"hl std\">(expparms)<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">names<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwd\">coef<\/span><span class=\"hl std\">(m1))<\/span>\r\n<span class=\"hl com\">## print results<\/span>\r\n<span class=\"hl std\">expparms<\/span>\r\n<\/pre>\n<\/div>\n<div class=\"output\">\n<pre class=\"knitr r\">##                      Est    pLL    pUL  bcaLL  bcaLL\r\n## count_(Intercept) 4.9426 2.4091 7.9892 2.9664 9.2641\r\n## count_child       0.3525 0.1736 0.8392 0.1982 0.9782\r\n## count_camper1     2.3026 1.0614 5.0862 1.0016 4.9528\r\n## zero_(Intercept)  3.6599 1.4195 9.2058 1.3412 8.3370\r\n## zero_persons      0.5687 0.3300 0.9245 0.3648 1.0063\r\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n<p>To better understand our model, we can compute the expected number of fish\ncaught for different combinations of our predictors. In fact, since we are\nworking with essentially categorical predictors, we can compute the expected\nvalues for all combinations using the <code>expand.grid<\/code> function to create\nall combinations and then the <code>predict<\/code> function to do it. We also remove any rows where the number of children exceeds the number of persons, which does not make sense logically, using the <code>subset<\/code> function. Finally we\ncreate a graph.<\/p>\n<div id=\"unnamed-chunk-10\" class=\"chunk\">\n<div class=\"rcode\">\n<div class=\"source\">\n<pre class=\"knitr r\"><span class=\"hl std\">newdata1<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">expand.grid<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">0<\/span><span class=\"hl opt\">:<\/span><span class=\"hl num\">3<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwd\">factor<\/span><span class=\"hl std\">(<\/span><span class=\"hl num\">0<\/span><span class=\"hl opt\">:<\/span><span class=\"hl num\">1<\/span><span class=\"hl std\">),<\/span> <span class=\"hl num\">1<\/span><span class=\"hl opt\">:<\/span><span class=\"hl num\">4<\/span><span class=\"hl std\">)<\/span>\r\n<span class=\"hl kwd\">colnames<\/span><span class=\"hl std\">(newdata1)<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">c<\/span><span class=\"hl std\">(<\/span><span class=\"hl str\">\"child\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl str\">\"camper\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl str\">\"persons\"<\/span><span class=\"hl std\">)<\/span>\r\n<span class=\"hl std\">newdata1<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">subset<\/span><span class=\"hl std\">(newdata1,<\/span> <span class=\"hl kwc\">subset<\/span><span class=\"hl std\">=(child<\/span><span class=\"hl opt\">&lt;=<\/span><span class=\"hl std\">persons))<\/span>\r\n<span class=\"hl std\">newdata1<\/span><span class=\"hl opt\">$<\/span><span class=\"hl std\">phat<\/span> <span class=\"hl kwb\">&lt;-<\/span> <span class=\"hl kwd\">predict<\/span><span class=\"hl std\">(m1, newdata1)<\/span>\r\n\r\n<span class=\"hl kwd\">ggplot<\/span><span class=\"hl std\">(newdata1,<\/span> <span class=\"hl kwd\">aes<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">x<\/span> <span class=\"hl std\">= child,<\/span> <span class=\"hl kwc\">y<\/span> <span class=\"hl std\">= phat,<\/span> <span class=\"hl kwc\">colour<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl kwd\">factor<\/span><span class=\"hl std\">(persons)))<\/span> <span class=\"hl opt\">+<\/span>\r\n  <span class=\"hl kwd\">geom_point<\/span><span class=\"hl std\">()<\/span> <span class=\"hl opt\">+<\/span>\r\n  <span class=\"hl kwd\">geom_line<\/span><span class=\"hl std\">()<\/span> <span class=\"hl opt\">+<\/span>\r\n  <span class=\"hl kwd\">facet_wrap<\/span><span class=\"hl std\">(<\/span><span class=\"hl opt\">~<\/span><span class=\"hl std\">camper)<\/span> <span class=\"hl opt\">+<\/span>\r\n  <span class=\"hl kwd\">labs<\/span><span class=\"hl std\">(<\/span><span class=\"hl kwc\">x<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl str\">\"Number of Children\"<\/span><span class=\"hl std\">,<\/span> <span class=\"hl kwc\">y<\/span> <span class=\"hl std\">=<\/span> <span class=\"hl str\">\"Predicted Fish Caught\"<\/span><span class=\"hl std\">)<\/span>\r\n<\/pre>\n<\/div>\n<\/div>\n<div class=\"rimage default\"><img decoding=\"async\" class=\"plot\" src=\"https:\/\/stats.idre.ucla.edu\/wp-content\/uploads\/2016\/02\/zipoisson-unnamed-chunk-10.png\" alt=\"plot of chunk unnamed-chunk-10\" width=\"500px\" height=\"500px\" \/><\/div>\n<\/div>\n<h2>Things to consider<\/h2>\n<ul>\n<li>Since <strong>zip<\/strong> has both a count model and a logit\nmodel, each of the two models should have good predictors. The two models do not\nnecessarily need to use the same predictors.<\/li>\n<li>Problems of perfect prediction, separation or partial separation can occur in the\nlogistic part of the zero-inflated model.<\/li>\n<li>Count data often use exposure variables to indicate the number of times the event\ncould have happened. You can incorporate a logged version of the exposure variable into your model by using the <code>offset()<\/code>\noption.<\/li>\n<li>It is not recommended that zero-inflated Poisson models be applied to\nsmall samples. What constitutes a small sample does not seem to be clearly defined\nin the literature.<\/li>\n<li>Pseudo-R-squared values differ from OLS R-squareds, please see\n<a href=\"https:\/\/stats.idre.ucla.edu\/other\/mult-pkg\/faq\/general\/faq-what-are-pseudo-r-squareds\/\">FAQ: What are\npseudo R-squareds?<\/a> for a discussion on this issue.<\/li>\n<li>In times past, the Vuong test had been used to test whether a zero-inflated Poisson model or a Poisson model (without the zero-inflation) was a better fit for the data.\u00a0 However, this test is no longer considered valid.\u00a0 Please see <a href=\"http:\/\/cybermetrics.wlv.ac.uk\/paperdata\/misusevuong.pdf\">The Misuse of The Vuong Test For Non-Nested Models to Test for Zero-Inflation<\/a> by Paul Wilson for further information.<\/li>\n<\/ul>\n<h2>See Also<\/h2>\n<ul>\n<li><code>zeroinfl<\/code><\/li>\n<\/ul>\n<h3>References<\/h3>\n<ul>\n<li>Long, J. S. 1997.\n<i>Regression Models for Categorical and Limited Dependent Variables.<\/i>\nThousand Oaks, CA: Sage Publications. Everitt, B. S. and Hothorn, T.\n<a href=\"http:\/\/cran.r-project.org\/web\/packages\/HSAUR\/vignettes\/preface.pdf\">\nA Handbook of Statistical Analyses Using R<\/a><\/li>\n<\/ul>\n<p><!--?php include \"stat\/footer.htm\"; ?--><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Zero-inflated Poisson regression is used to model count data that has an excess of zero counts. Further, theory suggests that the excess zeros are generated by a separate process from&#8230;<br><a class=\"moretag\" href=\"https:\/\/stats.oarc.ucla.edu\/r\/dae\/zip\/\"> Read More<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":916,"menu_order":19,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","footnotes":""},"class_list":["post-937","page","type-page","status-publish","entry"],"_links":{"self":[{"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/pages\/937","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/comments?post=937"}],"version-history":[{"count":15,"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/pages\/937\/revisions"}],"predecessor-version":[{"id":36370,"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/pages\/937\/revisions\/36370"}],"up":[{"embeddable":true,"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/pages\/916"}],"wp:attachment":[{"href":"https:\/\/stats.oarc.ucla.edu\/wp-json\/wp\/v2\/media?parent=937"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}